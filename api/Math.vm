function Math.init 0
push constant 0
return
function Math.abs 1
push argument 0
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 0
neg
pop local 0
goto IF_END1
label IF_FALSE1
push argument 0
pop local 0
label IF_END1
push local 0
return
function Math.multiply 6
push constant 0
pop local 0
push argument 0
call Math.abs 1
pop local 1
push argument 1
call Math.abs 1
pop local 2
push constant 1
pop local 3
push constant 0
pop local 4
push argument 0
push constant 0
eq
push argument 1
push constant 0
eq
or
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
return
label IF_FALSE2
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
eq
pop local 5
label WHILE_EXP2
push local 4
push constant 16
lt
not
if-goto WHILE_END2
push local 2
push local 3
and
push local 3
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 0
push local 1
add
pop local 0
label IF_FALSE3
push local 1
push local 1
add
pop local 1
push local 3
push local 3
add
pop local 3
push local 4
push constant 1
add
pop local 4
goto WHILE_EXP2
label WHILE_END2
push local 5
not
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 0
neg
pop local 0
label IF_FALSE4
push local 0
return
function Math.div 2
push argument 1
push constant 0
lt
push argument 1
push argument 0
gt
or
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
return
label IF_FALSE5
push argument 0
push argument 1
push argument 1
add
call Math.div 2
pop local 0
push local 0
push argument 1
call Math.multiply 2
pop local 1
push argument 0
push local 1
sub
push local 1
sub
push argument 1
lt
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push local 0
push local 0
add
return
goto IF_END6
label IF_FALSE6
push local 0
push local 0
add
push constant 1
add
return
label IF_END6
function Math.divide 4
push argument 0
call Math.abs 1
pop local 1
push argument 1
call Math.abs 1
pop local 2
push local 2
push constant 0
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 3
call Sys.error 1
return
label IF_FALSE7
push argument 0
push constant 0
lt
push argument 1
push constant 0
lt
eq
pop local 3
push local 1
push local 2
call Math.div 2
pop local 0
push local 3
not
if-goto IF_TRUE8
goto IF_FALSE8
label IF_TRUE8
push local 0
neg
pop local 0
label IF_FALSE8
push local 0
return
function Math.logTwo 2
push argument 0
push constant 16384
gt
push argument 0
push constant 32767
lt
push argument 0
push constant 32767
eq
or
and
if-goto IF_TRUE9
goto IF_FALSE9
label IF_TRUE9
push constant 15
return
label IF_FALSE9
push constant 1
pop local 0
push constant 0
pop local 1
label WHILE_EXP3
push local 0
push argument 0
lt
not
if-goto WHILE_END3
push local 0
push local 0
add
pop local 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP3
label WHILE_END3
push local 1
return
function Math.power 2
push argument 1
pop local 0
push constant 1
pop local 1
push argument 1
push constant 0
eq
if-goto IF_TRUE10
goto IF_FALSE10
label IF_TRUE10
push constant 1
return
label IF_FALSE10
label WHILE_EXP4
push local 0
push constant 0
gt
not
if-goto WHILE_END4
push local 1
push argument 0
call Math.multiply 2
pop local 1
push local 0
push constant 1
sub
pop local 0
goto WHILE_EXP4
label WHILE_END4
push local 1
return
function Math.sqrt 6
push constant 0
pop local 0
push argument 0
call Math.logTwo 1
pop local 4
push local 4
push constant 2
call Math.divide 2
pop local 5
push local 5
pop local 1
push argument 0
push constant 0
lt
if-goto IF_TRUE11
goto IF_FALSE11
label IF_TRUE11
push constant 3
call Sys.error 1
return
label IF_FALSE11
label WHILE_EXP5
push local 1
push constant 1
neg
gt
not
if-goto WHILE_END5
push constant 2
push local 1
call Math.power 2
pop local 3
push local 0
push local 3
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 2
push local 2
push argument 0
lt
push local 2
push argument 0
eq
or
push local 2
push constant 0
gt
and
if-goto IF_TRUE12
goto IF_FALSE12
label IF_TRUE12
push local 0
push local 3
add
pop local 0
label IF_FALSE12
push local 1
push constant 1
sub
pop local 1
goto WHILE_EXP5
label WHILE_END5
push local 0
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto IF_TRUE13
goto IF_FALSE13
label IF_TRUE13
push argument 0
return
goto IF_END13
label IF_FALSE13
push argument 1
return
label IF_END13
function Math.min 0
push argument 0
push argument 1
lt
if-goto IF_TRUE14
goto IF_FALSE14
label IF_TRUE14
push argument 0
return
goto IF_END14
label IF_FALSE14
push argument 1
return
label IF_END14
